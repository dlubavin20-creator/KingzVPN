import customtkinter as ctk
import requests
from requests.exceptions import RequestException
import urllib3
import base64
import json
from json.decoder import JSONDecodeError
import re
import threading
from threading import Event, Lock
import time
from subprocess import Popen, PIPE, STDOUT, TimeoutExpired, check_output as subprocess_check_output
import os
from os import path
import psutil
import sys
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
from datetime import datetime
from typing import Optional, Dict, List, Any, Union, Tuple
from queue import Queue

# Setup app directories
APP_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_DIR = os.path.join(APP_DIR, 'vpn_configs')
LOG_DIR = os.path.join(APP_DIR, 'logs')
for d in [CONFIG_DIR, LOG_DIR]:
    os.makedirs(d, exist_ok=True)

ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

class ModernVPNClient:
    def __init__(self):
        self.app = ctk.CTk()
        self.setup_window()
        self.configs = []
        self.current_config = None
        self.vpn_process = None
        self.is_connected = False
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_lock = threading.Lock()
        # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ OpenVPN
        self.process_output = []
        self.openvpn_config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'vpn_configs')
        if not os.path.exists(self.openvpn_config_path):
            os.makedirs(self.openvpn_config_path)

        # –°–æ–±—ã—Ç–∏—è –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ—Ç–æ–∫–æ–≤
        self.events = {
            'stats_stop': Event(),
            'monitor_stop': Event(),
            'process_stop': Event()
        }
        
        # –•—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        self.active_threads = {
            'monitor': None,
            'stats': None,
            'process': None
        }
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
        self.stats_queue = Queue(maxsize=100)
        
        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.speed_widgets = {
            'download': None,  # download_label
            'upload': None,    # upload_label
            'ping': None      # ping_label
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.setup_logging()
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        self.colors = {
            "primary": "#2b825b",
            "secondary": "#2196F3", 
            "success": "#4CAF50",
            "warning": "#FF9800",
            "danger": "#ff6b6b",
            "dark_bg": "#1a1a1a",
            "card_bg": ("#2d2d2d", "#1e1e1e")
        }
        
        self.load_data()
        self.create_ui()
        
    def setup_window(self):
        self.app.title("üîí KingzVPN - Secure Connection")
        self.app.geometry("1200x800")
        self.app.minsize(1000, 700)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.app.update_idletasks()
        x = (self.app.winfo_screenwidth() // 2) - (1200 // 2)
        y = (self.app.winfo_screenheight() // 2) - (800 // 2)
        self.app.geometry(f"1200x800+{x}+{y}")
        
    def load_data(self):
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.preset_servers = [
            {"name": "üá∫üá∏ –°–®–ê - –ù—å—é-–ô–æ—Ä–∫", "ping": 28, "load": 45, "flag": "us", "type": "preset"},
            {"name": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è - –§—Ä–∞–Ω–∫—Ñ—É—Ä—Ç", "ping": 35, "load": 32, "flag": "de", "type": "preset"},
            {"name": "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è - –õ–æ–Ω–¥–æ–Ω", "ping": 42, "load": 28, "flag": "gb", "type": "preset"},
        ]
        
    def create_ui(self):
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        self.main_container = ctk.CTkFrame(self.app, fg_color=self.colors["dark_bg"])
        self.main_container.pack(fill="both", expand=True)
        
        # –°–æ–∑–¥–∞–µ–º layout —Å sidebar –∏ main content
        self.create_sidebar()
        self.create_main_content()
        
    def create_sidebar(self):
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.sidebar = ctk.CTkFrame(
            self.main_container,
            width=280,
            corner_radius=0,
            fg_color=("#2d2d2d", "#1a1a1a")
        )
        self.sidebar.pack(side="left", fill="y")
        self.sidebar.pack_propagate(False)
        
        # –õ–æ–≥–æ—Ç–∏–ø –≤ sidebar
        logo_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        logo_frame.pack(pady=(30, 20), padx=20)
        
        self.logo_label = ctk.CTkLabel(
            logo_frame,
            text="üõ°Ô∏è KingzVPN",
            font=("Arial", 22, "bold"),
            text_color=self.colors["primary"]
        )
        self.logo_label.pack()
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.create_navigation()
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ sidebar
        self.create_sidebar_status()
        
    def create_navigation(self):
        nav_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        nav_frame.pack(fill="x", padx=15)
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = [
            ("üåê –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", self.show_quick_connect),
            ("üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", self.show_configs),
            ("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å", self.show_speed),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings)
        ]
        
        self.nav_buttons = {}
        for text, command in nav_buttons:
            btn = ctk.CTkButton(
                nav_frame,
                text=text,
                font=("Arial", 14),
                height=45,
                fg_color="transparent",
                text_color=("gray70", "gray70"),
                hover_color=("gray60", "gray30"),
                anchor="w",
                command=command
            )
            btn.pack(fill="x", pady=2)
            self.nav_buttons[text] = btn
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –≤–∫–ª–∞–¥–∫—É
        self.show_quick_connect()
        
    def create_sidebar_status(self):
        status_frame = ctk.CTkFrame(self.sidebar, fg_color="transparent")
        status_frame.pack(side="bottom", fill="x", padx=15, pady=20)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
        self.status_indicator = ctk.CTkLabel(
            status_frame,
            text="‚óè –û–§–§–õ–ê–ô–ù",
            font=("Arial", 12, "bold"),
            text_color=self.colors["danger"]
        )
        self.status_indicator.pack(anchor="w")
        
        # IP –∞–¥—Ä–µ—Å
        self.ip_label = ctk.CTkLabel(
            status_frame,
            text="IP: –ó–∞–≥—Ä—É–∑–∫–∞...",
            font=("Arial", 10),
            text_color="gray"
        )
        self.ip_label.pack(anchor="w")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º IP –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self.load_ip_info, daemon=True).start()
        
    def create_main_content(self):
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.main_content = ctk.CTkFrame(self.main_container, fg_color="transparent")
        self.main_content.pack(side="right", fill="both", expand=True, padx=20, pady=20)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        self.create_quick_connect_tab()
        self.create_configs_tab()
        self.create_speed_tab()
        self.create_settings_tab()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä—É—é –≤–∫–ª–∞–¥–∫—É
        self.show_quick_connect()
        
    def create_quick_connect_tab(self):
        self.quick_connect_frame = ctk.CTkFrame(self.main_content, fg_color="transparent")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = ctk.CTkLabel(
            self.quick_connect_frame,
            text="üåê –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
            font=("Arial", 28, "bold")
        )
        title.pack(anchor="w", pady=(0, 30))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.create_connection_card()
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        self.create_preset_servers()
        
        # –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.create_import_section()
        
    def create_connection_card(self):
        connection_card = ctk.CTkFrame(
            self.quick_connect_frame,
            corner_radius=20,
            fg_color=self.colors["card_bg"]
        )
        connection_card.pack(fill="x", pady=(0, 30))
        
        content_frame = ctk.CTkFrame(connection_card, fg_color="transparent")
        content_frame.pack(fill="x", padx=30, pady=30)
        
        # –°—Ç–∞—Ç—É—Å –∏ –∫–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        status_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        status_frame.pack(fill="x")
        
        self.connection_status = ctk.CTkLabel(
            status_frame,
            text="–ì–æ—Ç–æ–≤ –∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é",
            font=("Arial", 18),
            text_color="gray"
        )
        self.connection_status.pack(side="left")
        
        self.connect_button = ctk.CTkButton(
            status_frame,
            text="–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø",
            font=("Arial", 16, "bold"),
            height=50,
            width=200,
            fg_color=self.colors["primary"],
            hover_color="#1f6b4a",
            command=self.toggle_connection
        )
        self.connect_button.pack(side="right")
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(
            content_frame,
            height=6,
            progress_color=self.colors["success"]
        )
        self.progress_bar.pack(fill="x", pady=(20, 0))
        self.progress_bar.set(0)
        
    def create_preset_servers(self):
        servers_frame = ctk.CTkFrame(self.quick_connect_frame, fg_color="transparent")
        servers_frame.pack(fill="x", pady=(0, 30))
        
        title = ctk.CTkLabel(
            servers_frame,
            text="üöÄ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã",
            font=("Arial", 20, "bold")
        )
        title.pack(anchor="w", pady=(0, 15))
        
        # –°–µ—Ç–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        grid_frame = ctk.CTkFrame(servers_frame, fg_color="transparent")
        grid_frame.pack(fill="x")
        
        for i, server in enumerate(self.preset_servers):
            server_card = self.create_server_card(server)
            server_card.pack(side="left", fill="x", expand=True, padx=5)
            
    def create_server_card(self, server):
        card = ctk.CTkFrame(
            self.quick_connect_frame,
            corner_radius=15,
            fg_color=self.colors["card_bg"],
            border_width=2,
            border_color=("gray50", "gray30")
        )
        
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(fill="both", expand=True, padx=20, pady=20)
        
        # –§–ª–∞–≥ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        name_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        name_frame.pack(fill="x")
        
        ctk.CTkLabel(
            name_frame,
            text=server["name"],
            font=("Arial", 14, "bold")
        ).pack(side="left")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        stats_frame.pack(fill="x", pady=(10, 0))
        
        ctk.CTkLabel(
            stats_frame,
            text=f"üèì {server['ping']}ms",
            font=("Arial", 11),
            text_color="#888"
        ).pack(side="left")
        
        ctk.CTkLabel(
            stats_frame,
            text=f"üìä {server['load']}%",
            font=("Arial", 11),
            text_color="#888"
        ).pack(side="left", padx=(10, 0))
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connect_btn = ctk.CTkButton(
            content_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è",
            height=35,
            fg_color=self.colors["primary"],
            command=lambda s=server: self.connect_to_preset(s)
        )
        connect_btn.pack(fill="x", pady=(15, 0))
        
        return card
        
    def create_import_section(self):
        import_card = ctk.CTkFrame(
            self.quick_connect_frame,
            corner_radius=20,
            fg_color=self.colors["card_bg"]
        )
        import_card.pack(fill="x")
        
        content_frame = ctk.CTkFrame(import_card, fg_color="transparent")
        content_frame.pack(fill="x", padx=30, pady=25)
        
        title = ctk.CTkLabel(
            content_frame,
            text="üì• –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            font=("Arial", 18, "bold")
        )
        title.pack(anchor="w", pady=(0, 15))
        
        # URL –≤–≤–æ–¥
        url_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        url_frame.pack(fill="x")
        
        self.url_entry = ctk.CTkEntry(
            url_frame,
            placeholder_text="–í–≤–µ–¥–∏—Ç–µ URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...",
            height=45,
            font=("Arial", 13)
        )
        self.url_entry.pack(side="left", fill="x", expand=True, padx=(0, 10))
        
        # –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–º –∫–æ–Ω—Ñ–∏–≥–æ–º
        self.url_entry.insert(0, "http://185.184.123.133:2096/sub/cnk3x4buk8azncdw")
        
        import_btn = ctk.CTkButton(
            url_frame,
            text="–ò–º–ø–æ—Ä—Ç",
            height=45,
            width=120,
            fg_color=self.colors["secondary"],
            command=self.import_config
        )
        import_btn.pack(side="right")
        
    def create_configs_tab(self):
        self.configs_frame = ctk.CTkFrame(self.main_content, fg_color="transparent")
        
        title = ctk.CTkLabel(
            self.configs_frame,
            text="üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", 
            font=("Arial", 28, "bold")
        )
        title.pack(anchor="w", pady=(0, 30))
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
        self.configs_scrollable = ctk.CTkScrollableFrame(
            self.configs_frame,
            fg_color="transparent"
        )
        self.configs_scrollable.pack(fill="both", expand=True)
        
    def create_speed_tab(self):
        self.speed_frame = ctk.CTkFrame(self.main_content, fg_color="transparent")
        
        title = ctk.CTkLabel(
            self.speed_frame,
            text="‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
            font=("Arial", 28, "bold")
        )
        title.pack(anchor="w", pady=(0, 30))
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed_cards_frame = ctk.CTkFrame(self.speed_frame, fg_color="transparent")
        speed_cards_frame.pack(fill="x", pady=(0, 30))
        
        self.download_card = self.create_speed_card("üì• –°–∫–∞—á–∞—Ç—å", "0", "Mbps")
        self.download_card.pack(side="left", fill="x", expand=True, padx=5)
        
        self.upload_card = self.create_speed_card("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å", "0", "Mbps") 
        self.upload_card.pack(side="left", fill="x", expand=True, padx=5)
        
        self.ping_card = self.create_speed_card("üèì –ü–∏–Ω–≥", "0", "ms")
        self.ping_card.pack(side="left", fill="x", expand=True, padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        test_btn = ctk.CTkButton(
            self.speed_frame,
            text="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏",
            height=50,
            font=("Arial", 16, "bold"),
            fg_color=self.colors["primary"],
            command=self.start_speed_test
        )
        test_btn.pack(pady=20)
        
    def create_speed_card(self, title: str, value: str, unit: str) -> ctk.CTkFrame:
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        try:
            card = ctk.CTkFrame(
                self.speed_frame,
                corner_radius=15,
                fg_color=self.colors["card_bg"],
                height=150
            )
            card.pack_propagate(False)
            
            content_frame = ctk.CTkFrame(card, fg_color="transparent")
            content_frame.pack(fill="both", expand=True, padx=20, pady=20)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            ctk.CTkLabel(
                content_frame,
                text=title,
                font=("Arial", 16),
                text_color="gray"
            ).pack(anchor="w")
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ
            value_label = ctk.CTkLabel(
                content_frame,
                text=value,
                font=("Arial", 32, "bold")
            )
            value_label.pack(expand=True)
            
            # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            ctk.CTkLabel(
                content_frame,
                text=unit,
                font=("Arial", 14),
                text_color="gray"
            ).pack(anchor="e")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–∂–µ—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–µ
            widget_map = {
                "üì• –°–∫–∞—á–∞—Ç—å": "download",
                "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å": "upload",
                "üèì –ü–∏–Ω–≥": "ping"
            }
            
            if title in widget_map:
                self.speed_widgets[widget_map[title]] = value_label
                
            return card
            
        except Exception as e:
            self.logger.error(f"Failed to create speed card: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ—Ä–µ–π–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            return ctk.CTkFrame(self.speed_frame, fg_color="transparent")
            
    def safe_destroy(self, widget: Any) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            if widget and widget.winfo_exists():
                widget.destroy()
        except Exception as e:
            self.logger.error(f"Failed to destroy widget: {e}")
        
        return card
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å —Å —Ä–æ—Ç–∞—Ü–∏–µ–π"""
        try:
            self.logger = logging.getLogger('KingzVPN')
            self.logger.setLevel(logging.DEBUG)
            
            # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            formatter = logging.Formatter(
                '%(asctime)s [%(levelname)s] %(filename)s:%(lineno)d - %(message)s',
                datefmt='%Y-%m-%d %H:%M:%S'
            )
            
            # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (10 —Ñ–∞–π–ª–æ–≤ –ø–æ 5MB)
            log_file = os.path.join(LOG_DIR, 'vpn.log')
            file_handler = RotatingFileHandler(
                log_file, 
                maxBytes=5*1024*1024,  # 5MB
                backupCount=10,
                encoding='utf-8'
            )
            file_handler.setLevel(logging.DEBUG)
            file_handler.setFormatter(formatter)
            
            # –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
            console_handler = logging.StreamHandler()
            console_handler.setLevel(logging.INFO)
            console_formatter = logging.Formatter(
                '%(asctime)s [%(levelname)s] %(message)s',
                datefmt='%H:%M:%S'
            )
            console_handler.setFormatter(console_formatter)
            
            # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
            self.logger.handlers.clear()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã
            self.logger.addHandler(file_handler)
            self.logger.addHandler(console_handler)
            
            self.logger.info("Logging initialized")
            self.logger.debug(f"Python version: {sys.version}")
            self.logger.debug(f"OS: {os.name}")
            self.logger.debug(f"Working directory: {os.getcwd()}")
            
        except Exception as e:
            print(f"Failed to setup logging: {e}")
            self.logger = logging.getLogger('KingzVPN')
            self.logger.addHandler(logging.StreamHandler())
            
    def safe_ui_update(self, widget: Any, **kwargs) -> None:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤–∏–¥–∂–µ—Ç—ã –∏–∑ –ª—é–±–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        try:
            self.app.after(0, widget.configure, kwargs)
        except Exception as e:
            self.logger.error(f"UI update failed for {widget}: {e}")
            
    def show_notification(self, message: str, type_: str = "info", duration: int = 3000) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º default
            colors = {
                "success": self.colors["success"],
                "error": self.colors["danger"],
                "warning": self.colors["warning"],
                "info": self.colors["secondary"]
            }
            bg_color = colors.get(type_, self.colors["secondary"])
            
            # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification = ctk.CTkFrame(
                self.app,
                corner_radius=10,
                fg_color=bg_color
            )
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
            try:
                notification.place(relx=0.5, rely=0.1, anchor="center")
                
                label = ctk.CTkLabel(
                    notification,
                    text=message,
                    text_color="white",
                    font=("Arial", 12)
                )
                label.pack(padx=20, pady=10)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                log_level = {
                    "success": logging.INFO,
                    "error": logging.ERROR,
                    "warning": logging.WARNING,
                    "info": logging.INFO
                }.get(type_, logging.INFO)
                
                self.logger.log(log_level, f"Notification: {message}")
                
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
                self.app.after(duration, notification.destroy)
                
            except Exception as e:
                self.logger.error(f"Failed to show notification content: {e}")
                notification.destroy()
                
        except Exception as e:
            self.logger.error(f"Failed to create notification: {e}")
            print(f"Notification failed: {message} ({e})")
        
    def prepare_vpn_config(self, config):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è OpenVPN"""
        if config['type'] in ['vmess', 'ss', 'trojan']:
            self.log("‚ö†Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è.")
            return None
            
        if config['type'] == 'openvpn':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º .ovpn —Ñ–∞–π–ª
            config_name = f"config_{int(time.time())}.ovpn"
            config_path = os.path.join(self.openvpn_config_path, config_name)
            
            try:
                with open(config_path, 'w') as f:
                    f.write(config['content'])
                self.log(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {config_path}")
                return config_path
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
                return None
        
        return None
        
    def monitor_vpn_process(self, process):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –≤—ã–≤–æ–¥ –ø—Ä–æ—Ü–µ—Å—Å–∞ OpenVPN"""
        while process.poll() is None:
            try:
                line = process.stdout.readline()
                if not line:
                    break
                    
                line = line.decode('utf-8', errors='ignore').strip()
                self.process_output.append(line)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if any(x in line.lower() for x in ['error', 'fatal', 'warn']):
                    self.logger.warning(line)
                    self.app.after(0, self.show_notification, f"VPN: {line}", "warning")
                elif 'initialization sequence completed' in line.lower():
                    self.logger.info("VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    self.app.after(0, self.connection_success)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                
        # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        if process.poll() is not None:
            self.logger.warning(f"–ü—Ä–æ—Ü–µ—Å—Å OpenVPN –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
            self.app.after(0, self.handle_connection_error, f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
            
    def handle_connection_error(self, error_msg):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {error_msg}")
        self.disconnect_vpn()
        self.show_notification(f"–û—à–∏–±–∫–∞: {error_msg}", "error")
        
    def create_settings_tab(self):
        self.settings_frame = ctk.CTkFrame(self.main_content, fg_color="transparent")
        
        title = ctk.CTkLabel(
            self.settings_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            font=("Arial", 28, "bold")
        )
        title.pack(anchor="w", pady=(0, 30))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∞
        settings_card = ctk.CTkFrame(
            self.settings_frame,
            corner_radius=20,
            fg_color=self.colors["card_bg"]
        )
        settings_card.pack(fill="x")
        
        content_frame = ctk.CTkFrame(settings_card, fg_color="transparent")
        content_frame.pack(fill="x", padx=30, pady=25)
        
        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
        auto_start_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        auto_start_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(
            auto_start_frame,
            text="–ó–∞–ø—É—Å–∫ —Å Windows",
            font=("Arial", 14)
        ).pack(side="left")
        
        auto_start_switch = ctk.CTkSwitch(
            auto_start_frame,
            text="",
            width=20
        )
        auto_start_switch.pack(side="right")
        
        # Kill Switch
        kill_switch_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        kill_switch_frame.pack(fill="x", pady=10)
        
        ctk.CTkLabel(
            kill_switch_frame,
            text="Kill Switch (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–µ–∑ VPN)",
            font=("Arial", 14)
        ).pack(side="left")
        
        kill_switch = ctk.CTkSwitch(
            kill_switch_frame,
            text="",
            width=20
        )
        kill_switch.pack(side="right")
        
    def show_quick_connect(self):
        self.hide_all_tabs()
        self.quick_connect_frame.pack(fill="both", expand=True)
        self.highlight_nav_button("üåê –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        
    def show_configs(self):
        self.hide_all_tabs()
        self.configs_frame.pack(fill="both", expand=True)
        self.highlight_nav_button("üìÅ –ú–æ–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
    def show_speed(self):
        self.hide_all_tabs()
        self.speed_frame.pack(fill="both", expand=True)
        self.highlight_nav_button("‚ö° –°–∫–æ—Ä–æ—Å—Ç—å")
        
    def show_settings(self):
        self.hide_all_tabs()
        self.settings_frame.pack(fill="both", expand=True)
        self.highlight_nav_button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
    def hide_all_tabs(self):
        for frame in [self.quick_connect_frame, self.configs_frame, 
                     self.speed_frame, self.settings_frame]:
            frame.pack_forget()
            
    def highlight_nav_button(self, button_text):
        for text, btn in self.nav_buttons.items():
            if text == button_text:
                btn.configure(fg_color=("gray60", "gray30"))
            else:
                btn.configure(fg_color="transparent")
                
    def connect_to_preset(self, server):
        self.log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {server['name']}...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ preset —Å–µ—Ä–≤–µ—Ä–∞–º
        
    def import_config(self):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ URL"""
        try:
            url = self.url_entry.get().strip()
            if not url:
                self.show_notification("–í–≤–µ–¥–∏—Ç–µ URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", "warning")
                return
                
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
            if not url.startswith(('http://', 'https://')):
                self.show_notification("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL", "warning")
                return
                
            # –ë–ª–æ–∫–∏—Ä—É–µ–º UI –Ω–∞ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
            self.url_entry.configure(state="disabled")
            self.show_notification("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...", "info")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –¥–ª—è –ø–æ—Ç–æ–∫–∞
            thread_url = url  # –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è –ø–æ—Ç–æ–∫–∞
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            thread = threading.Thread(
                target=self.download_config,
                args=(thread_url,),
                daemon=True
            )
            thread.start()
            
            # –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –ø–æ—Ç–æ–∫–æ–º
            self.active_threads['download'] = thread
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
            self.show_notification(f"–û—à–∏–±–∫–∞: {str(e)}", "error")
            self.url_entry.configure(state="normal")
        
    def download_config(self, url: str) -> None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN –±–µ–∑–æ–ø–∞—Å–Ω–æ"""
        if not isinstance(url, str):
            self.app.after(0, self.show_notification, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL", "error")
            return

        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ —Å URL: {url}")
            
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'Accept': 'text/plain, application/json, application/x-ovpn',
                'Connection': 'close'
            }
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ SSL –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö VPN —Å–µ—Ä–≤–∏—Å–æ–≤
            with urllib3.disable_warnings():
                response = requests.get(
                    url, 
                    headers=headers, 
                    timeout=30, 
                    verify=False, 
                    stream=True
                )
                response.raise_for_status()
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                content = ""
                total_size = 0
                chunk_size = 8192
                max_size = 1024 * 1024  # 1MB limit
                
                for chunk in response.iter_content(chunk_size=chunk_size, decode_unicode=True):
                    total_size += len(chunk)
                    if total_size > max_size:
                        raise ValueError("–†–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1MB")
                    content += chunk
                
            content = content.strip()
            self.logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(content)} –±–∞–π—Ç")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            if len(content) > 50000:
                self.logger.warning("–ë–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥–∞, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 50KB")
                content = content[:50000]
            
            config_type = self.detect_config_type(content)
            if not config_type:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
            config_data = {
                'name': f"{config_type} {time.strftime('%H:%M')}",
                'type': config_type,
                'content': content,
                'url': url,
                'imported_at': time.strftime("%Y-%m-%d %H:%M:%S")
            }
            
            self.logger.info(f"–ö–æ–Ω—Ñ–∏–≥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {config_type}")
            self.app.after(0, self.add_config, config_data)
            self.app.after(0, lambda: self.show_notification(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è {config_type} –∑–∞–≥—Ä—É–∂–µ–Ω–∞!", "success"))
            
        except requests.exceptions.RequestException as e:
            error_msg = f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
            self.logger.error(error_msg)
            self.app.after(0, lambda: self.show_notification(error_msg, "error"))
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            self.logger.error(error_msg)
            self.app.after(0, lambda: self.show_notification(error_msg, "error"))
            
    def detect_config_type(self, content: str, max_recursion: int = 3) -> Optional[str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Ä–µ–∫—É—Ä—Å–∏–∏
        
        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–∞
            max_recursion: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏ –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64
            
        Returns:
            –¢–∏–ø –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        """
        if not content or max_recursion <= 0:
            return None
            
        content = content.strip()
        
        # OpenVPN –∫–æ–Ω—Ñ–∏–≥ (–±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        if all(x in content.lower() for x in ['client', 'remote']) and \
           any(x in content.lower() for x in ['proto tcp', 'proto udp']):
            return 'openvpn'
            
        # VMess —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if 'vmess://' in content:
            try:
                vmess_data = content.split('vmess://')[1].strip()
                decoded = base64.b64decode(vmess_data + '=' * (-len(vmess_data) % 4))
                config = json.loads(decoded)
                required = ['add', 'port', 'id', 'aid']  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if all(x in config for x in required):
                    return 'vmess'
            except Exception as e:
                self.logger.debug(f"VMess validation failed: {e}")
            
        # ShadowSocks —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        if 'ss://' in content:
            try:
                ss_url = re.search(r'ss://([^#\s]+)', content).group(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º base64 —á–∞—Å—Ç—å
                if '#' in ss_url:
                    ss_url = ss_url.split('#')[0]
                decoded = base64.b64decode(ss_url + '=' * (-len(ss_url) % 4))
                if b':' in decoded and b'@' in decoded:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç method:password@host:port
                    return 'shadowsocks'
            except Exception as e:
                self.logger.debug(f"SS validation failed: {e}")
            
        # Trojan —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞
        if 'trojan://' in content:
            try:
                if re.match(r'trojan://[^@]+@[\w\-\.]+:\d+\??[^#]*(?:#.*)?$', content):
                    return 'trojan'
            except Exception as e:
                self.logger.debug(f"Trojan validation failed: {e}")
            
        # Base64 —Å —Ä–µ–∫—É—Ä—Å–∏–µ–π –∏ –ª–∏–º–∏—Ç–æ–º
        try:
            if re.match(r'^[A-Za-z0-9+/=]+$', content):
                missing_padding = (-len(content) % 4)
                if missing_padding:
                    content += '=' * missing_padding
                    
                decoded = base64.b64decode(content).decode('utf-8', errors='ignore')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                if len(decoded) > 50000:
                    self.logger.warning("Base64 decoded content too large, truncating")
                    decoded = decoded[:50000]
                    
                if any(x in decoded for x in ['client', 'vmess://', 'ss://', 'trojan://']):
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ —Å —É–º–µ–Ω—å—à–µ–Ω–∏–µ–º —Å—á–µ—Ç—á–∏–∫–∞
                    return self.detect_config_type(decoded, max_recursion - 1)
        except Exception as e:
            self.logger.debug(f"Base64 decode failed: {e}")
            
        # JSON/YAML —Å –∫–æ–Ω—Ñ–∏–≥–∞–º–∏ (–±–æ–ª–µ–µ —Ç—â–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
        try:
            if content.lstrip().startswith(('{', '[')):
                data = json.loads(content)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                if isinstance(data, dict):
                    # Clash —Ñ–æ—Ä–º–∞—Ç
                    if 'proxies' in data and isinstance(data['proxies'], list):
                        return 'clash_config'
                    # –û–±—ã—á–Ω—ã–π JSON –∫–æ–Ω—Ñ–∏–≥
                    if any(x in data for x in ['server', 'remote', 'address']):
                        return 'json_config'
                elif isinstance(data, list):
                    # –ú–∞—Å—Å–∏–≤ –∫–æ–Ω—Ñ–∏–≥–æ–≤
                    if any(isinstance(x, dict) and 'type' in x for x in data):
                        return 'json_config'
                        
        except json.JSONDecodeError:
            self.logger.debug("Not a valid JSON")
        except Exception as e:
            self.logger.debug(f"JSON validation failed: {e}")
            
        return None
            
    def add_config(self, config_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            config_data = self.prepare_config_data(config_data)
            if not config_data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —ç—Ç–æ OpenVPN –∫–æ–Ω—Ñ–∏–≥
            if config_data['type'] == 'openvpn':
                config_path = self.save_openvpn_config(config_data)
                if config_path:
                    config_data['file_path'] = config_path
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
            for existing in self.configs:
                if self.is_duplicate_config(existing, config_data):
                    self.logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç –∫–æ–Ω—Ñ–∏–≥–∞")
                    self.show_notification("–¢–∞–∫–æ–π –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", "warning")
                    return
                    
            self.configs.append(config_data)
            self.create_config_card(config_data)
            self.logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config_data['name']}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            self.show_notification(f"–û—à–∏–±–∫–∞: {str(e)}", "error")
            
    def is_duplicate_config(self, config1, config2):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –∫–æ–Ω—Ñ–∏–≥–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏"""
        if config1['type'] != config2['type']:
            return False
            
        if config1.get('url') and config2.get('url'):
            return config1['url'] == config2['url']
            
        if 'content' in config1 and 'content' in config2:
            return config1['content'] == config2['content']
            
        return False
        
    def prepare_config_data(self, config_data):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥–∞"""
        required_fields = ['name', 'type', 'content']
        for field in required_fields:
            if field not in config_data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}")
                
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø
        config_data['type'] = config_data['type'].lower()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –Ω–µ—Ç
        if 'imported_at' not in config_data:
            config_data['imported_at'] = time.strftime("%Y-%m-%d %H:%M:%S")
            
        return config_data
        
    def save_openvpn_config(self, config_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç OpenVPN –∫–æ–Ω—Ñ–∏–≥ –≤ —Ñ–∞–π–ª"""
        try:
            if not os.path.exists(self.openvpn_config_path):
                os.makedirs(self.openvpn_config_path)
                
            safe_name = re.sub(r'[^\w\-_.]', '_', config_data['name'])
            config_path = os.path.join(
                self.openvpn_config_path,
                f"{safe_name}_{int(time.time())}.ovpn"
            )
            
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(config_data['content'])
                
            self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ–Ω—Ñ–∏–≥: {config_path}")
            return config_path
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return None
            
    def validate_config_content(self, config_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
        try:
            config_type = config_data.get('type', '').lower()
            content = config_data.get('content', '')
            
            if not content:
                return False
                
            if config_type == 'openvpn':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–∏–≤—ã OpenVPN
                required = ['client', 'remote', 'proto']
                return all(x in content.lower() for x in required)
                
            elif config_type == 'vmess':
                # –î–ª—è VMess –ø—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if 'vmess://' in content:
                    vmess_data = content.split('vmess://')[1]
                    try:
                        decoded = base64.b64decode(vmess_data + '=' * (-len(vmess_data) % 4))
                        json.loads(decoded)
                        return True
                    except:
                        return False
                        
            elif config_type == 'shadowsocks':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç SS URL
                return bool(re.match(r'ss://[A-Za-z0-9+/=]+@[\w\-\.]+:\d+', content))
                
            elif config_type == 'trojan':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç Trojan URL
                return bool(re.match(r'trojan://[^@]+@[\w\-\.]+:\d+', content))
                
            elif config_type == 'json_config':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
                try:
                    json.loads(content)
                    return True
                except:
                    return False
                    
            return False
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
            return False
            
    def create_config_card(self, config):
        """–°–æ–∑–¥–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ UI"""
        card = ctk.CTkFrame(
            self.configs_scrollable,
            corner_radius=15,
            fg_color=self.colors["card_bg"]
        )
        card.pack(fill="x", pady=5, padx=5)
        
        content_frame = ctk.CTkFrame(card, fg_color="transparent")
        content_frame.pack(fill="x", padx=20, pady=15)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–∏–≥–µ
        info_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        info_frame.pack(side="left", fill="x", expand=True)
        
        ctk.CTkLabel(
            info_frame,
            text=config['name'],
            font=("Arial", 14, "bold")
        ).pack(anchor="w")
        
        ctk.CTkLabel(
            info_frame,
            text=f"–¢–∏–ø: {config['type']} ‚Ä¢ {config['imported_at']}",
            font=("Arial", 11),
            text_color="gray"
        ).pack(anchor="w", pady=(2, 0))
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        actions_frame = ctk.CTkFrame(content_frame, fg_color="transparent")
        actions_frame.pack(side="right")
        
        ctk.CTkButton(
            actions_frame,
            text="–ü–æ–¥–∫–ª—é—á–∏—Ç—å",
            width=100,
            fg_color=self.colors["primary"],
            command=lambda c=config: self.connect_to_config(c)
        ).pack(side="left", padx=(0, 5))
        
        ctk.CTkButton(
            actions_frame,
            text="–£–¥–∞–ª–∏—Ç—å",
            width=100,
            fg_color=self.colors["danger"],
            command=lambda c=config, card=card: self.delete_config(c, card)
        ).pack(side="left")
        
    def connect_to_config(self, config):
        self.current_config = config
        self.connect_vpn()
        
    def check_openvpn_installed(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ OpenVPN –≤ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            result = subprocess_check_output(['openvpn', '--version'], 
                                          stderr=STDOUT, timeout=2).decode()
            self.logger.info(f"OpenVPN version: {result.splitlines()[0]}")
            return True
        except Exception as e:
            self.logger.error(f"OpenVPN not found: {e}")
            return False
            
    def cleanup_old_configs(self, max_age_days: int = 7) -> None:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏"""
        try:
            now = time.time()
            for root, _, files in os.walk(CONFIG_DIR):
                for f in files:
                    if not f.endswith('.ovpn'):
                        continue
                    fpath = os.path.join(root, f)
                    if now - os.path.getmtime(fpath) > max_age_days * 86400:
                        try:
                            os.remove(fpath)
                            self.logger.info(f"Removed old config: {f}")
                        except OSError as e:
                            self.logger.error(f"Failed to remove {f}: {e}")
        except Exception as e:
            self.logger.error(f"Cleanup error: {e}")
            
    def connect_vpn(self):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ VPN"""
        if not self.current_config:
            self.show_notification("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", "warning")
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenVPN
        if not self.check_openvpn_installed():
            self.show_notification("OpenVPN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", "error")
            return
            
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.connection_lock.acquire(blocking=False):
            self.logger.warning("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
            self.show_notification("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "warning")
            return
            
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ñ–∏–≥–æ–≤ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        self.cleanup_old_configs()
            
        try:
            if self.is_connected:
                self.disconnect_vpn()
                return
                
            self.is_connected = True
            self.connect_button.configure(
                text="–û–¢–ö–õ–Æ–ß–ò–¢–¨–°–Ø",
                fg_color=self.colors["danger"],
                hover_color="#ff5252",
                state="disabled"  # –ë–ª–æ–∫–∏—Ä—É–µ–º –Ω–∞ –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            )
            
            self.connection_status.configure(
                text="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...",
                text_color=self.colors["warning"]
            )
            
            self.status_indicator.configure(
                text="‚óè –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï...",
                text_color=self.colors["warning"]
            )
            
            self.progress_bar.start()
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            config_path = self.prepare_vpn_config(self.current_config)
            if not config_path:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º OpenVPN
            cmd = [
                'openvpn',  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ OpenVPN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH
                '--config', config_path,
                '--auth-nocache'  # –ù–µ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª–∏
            ]
            
            self.logger.info(f"–ó–∞–ø—É—Å–∫ OpenVPN: {' '.join(cmd)}")
            
            process = Popen(
                cmd,
                stdout=PIPE,
                stderr=STDOUT,
                bufsize=1,
                universal_newlines=False
            )
            
            self.vpn_process = process
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitor_thread = threading.Thread(
                target=self.monitor_vpn_process,
                args=(process,),
                daemon=True
            )
            monitor_thread.start()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.active_threads['process'] = monitor_thread
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_stop_event.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º event –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            stats_thread = threading.Thread(target=self.start_stats_monitor, daemon=True)
            stats_thread.start()
            self.active_threads['stats'] = stats_thread
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            self.show_notification(f"–û—à–∏–±–∫–∞: {str(e)}", "error")
            self.disconnect_vpn()
        finally:
            self.connect_button.configure(state="normal")
            self.connection_lock.release()
        
    def disconnect_vpn(self):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç VPN —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("–û—Ç–∫–ª—é—á–µ–Ω–∏–µ VPN...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        for event_name in self.events:
            self.events[event_name].set()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å OpenVPN –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
        if self.vpn_process:
            try:
                self.vpn_process.terminate()
                try:
                    self.vpn_process.wait(timeout=5)
                except TimeoutExpired:
                    self.logger.warning("OpenVPN process not responding, forcing kill")
                    self.vpn_process.kill()
            except Exception as e:
                self.logger.error(f"Error stopping OpenVPN process: {e}")
            finally:
                self.vpn_process = None
                
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏
        for thread_name, thread in self.active_threads.items():
            if thread and thread.is_alive():
                self.logger.info(f"Waiting for thread {thread_name} to finish")
                try:
                    thread.join(timeout=2)
                    if thread.is_alive():
                        self.logger.warning(f"Thread {thread_name} did not finish in time")
                except Exception as e:
                    self.logger.error(f"Error joining thread {thread_name}: {e}")
                
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        self.active_threads = {k: None for k in self.active_threads}
        
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        try:
            while not self.stats_queue.empty():
                self.stats_queue.get_nowait()
        except Exception as e:
            self.logger.error(f"Error clearing stats queue: {e}")
            
        self.is_connected = False
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI
        self.safe_ui_update(
            self.connect_button,
            text="–ü–û–î–ö–õ–Æ–ß–ò–¢–¨–°–Ø",
            fg_color=self.colors["primary"],
            hover_color="#1f6b4a"
        )
        
        self.safe_ui_update(
            self.connection_status,
            text="–û—Ç–∫–ª—é—á–µ–Ω–æ",
            text_color="gray"
        )
        
        self.safe_ui_update(
            self.status_indicator,
            text="‚óè –û–§–§–õ–ê–ô–ù", 
            text_color=self.colors["danger"]
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        self.progress_bar.stop()
        self.progress_bar.set(0)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ
        for widget in self.speed_widgets.values():
            if widget and widget.winfo_exists():
                self.safe_ui_update(widget, text="0")
        
        self.show_notification("VPN –æ—Ç–∫–ª—é—á–µ–Ω", "info")
        self.logger.info("VPN –æ—Ç–∫–ª—é—á–µ–Ω")
        
    def toggle_connection(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not self.is_connected:
            self.connect_vpn()
        else:
            self.disconnect_vpn()
            
    def update_connection_status(self, status, progress=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ UI"""
        self.connection_status.configure(text=status)
        if progress is not None:
            self.progress_bar.set(progress)
        
    def connection_success(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"""
        self.logger.info("VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        self.connection_status.configure(
            text="–ó–∞—â–∏—â–µ–Ω–æ ‚úì",
            text_color=self.colors["success"]
        )
        
        self.status_indicator.configure(
            text="‚óè –û–ù–õ–ê–ô–ù",
            text_color=self.colors["success"] 
        )
        
        self.progress_bar.set(1.0)
        self.progress_bar.stop()
        
        self.show_notification("VPN —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!", "success")
        
    def start_stats_monitor(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ç–µ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        self.logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            net_io = psutil.net_io_counters()
            last_bytes = {
                'sent': net_io.bytes_sent,
                'recv': net_io.bytes_recv
            }
            last_time = time.time()
            
            while not self.events['stats_stop'].is_set():
                try:
                    current_time = time.time()
                    interval = max(current_time - last_time, 0.1)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
                    try:
                        counters = psutil.net_io_counters()
                        current_bytes = {
                            'sent': counters.bytes_sent,
                            'recv': counters.bytes_recv
                        }
                    except Exception as e:
                        self.logger.error(f"Failed to get network counters: {e}")
                        time.sleep(1)
                        continue
                    
                    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
                    speeds = {}
                    for direction in ['sent', 'recv']:
                        byte_diff = current_bytes[direction] - last_bytes[direction]
                        if byte_diff < 0:  # Counter overflow
                            byte_diff = current_bytes[direction]
                        speeds[direction] = (byte_diff * 8) / (1024 * 1024 * interval)
                    
                    # –ò–∑–º–µ—Ä—è–µ–º –ø–∏–Ω–≥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    ping_ms = self.measure_ping()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                    stats_data = {
                        'download': speeds['recv'],
                        'upload': speeds['sent'],
                        'ping': ping_ms
                    }
                    
                    try:
                        self.stats_queue.put_nowait(stats_data)
                        self.app.after(0, self.process_stats_queue)
                    except Exception as e:
                        self.logger.error(f"Failed to queue stats update: {e}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                    last_bytes = current_bytes.copy()
                    last_time = current_time
                    
                except Exception as e:
                    self.logger.error(f"Stats monitor iteration error: {e}")
                    
                time.sleep(1)
                
        except Exception as e:
            self.logger.error(f"Stats monitor critical error: {e}")
        finally:
            self.logger.info("Stats monitor stopped")
            
    def measure_ping(self) -> int:
        """–ò–∑–º–µ—Ä—è–µ—Ç –ø–∏–Ω–≥ –¥–æ Google DNS —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        try:
            ping_output = subprocess_check_output(
                ['ping', '-n', '1', '8.8.8.8'],
                stderr=STDOUT,
                timeout=2
            ).decode('utf-8', errors='ignore')
            
            match = re.search(r'–≤—Ä–µ–º—è=(\d+)–º—Å', ping_output)
            if match:
                return int(match.group(1))
        except Exception as e:
            self.logger.debug(f"Ping measurement failed: {e}")
        return 0
        
    def process_stats_queue(self) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            while not self.stats_queue.empty():
                stats = self.stats_queue.get_nowait()
                if stats:
                    self.update_speed_stats(
                        stats['download'],
                        stats['upload'],
                        stats['ping']
                    )
        except Exception as e:
            self.logger.error(f"Failed to process stats queue: {e}")
            
    def update_speed_stats(self, download: float, upload: float, ping: int) -> None:
        """Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ UI"""
        try:
            updates = {
                'download': f"{download:.1f}",
                'upload': f"{upload:.1f}",
                'ping': str(ping)
            }
            
            for key, value in updates.items():
                widget = self.speed_widgets.get(key)
                if widget and widget.winfo_exists():
                    self.safe_ui_update(widget, text=value)
                    
        except Exception as e:
            self.logger.error(f"Failed to update speed stats: {e}")
        
    def start_speed_test(self):
        self.show_notification("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏...", "info")
        # –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
        threading.Thread(target=self.simulate_speed_test, daemon=True).start()
        
    def simulate_speed_test(self):
        for i in range(101):
            time.sleep(0.03)
            self.app.after(0, self.progress_bar.set, i/100)
            
        time.sleep(1)
        self.app.after(0, self.progress_bar.set, 0)
        self.app.after(0, lambda: self.show_notification("–¢–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!", "success"))
        
    def load_ip_info(self):
        try:
            response = requests.get('https://api.ipify.org', timeout=5)
            ip = response.text
            self.app.after(0, self.ip_label.configure, {"text": f"IP: {ip}"})
        except:
            self.app.after(0, self.ip_label.configure, {"text": "IP: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ"})
            
    def show_notification(self, message: str, type_: str = "info", duration: int = 3000) -> None:
        """Thread-safe –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
        if not isinstance(message, str):
            self.logger.error(f"Invalid notification message type: {type(message)}")
            return
            
        def create_notification():
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                notification = ctk.CTkFrame(
                    self.app,
                    corner_radius=10,
                    fg_color={
                        "success": self.colors["success"],
                        "error": self.colors["danger"], 
                        "warning": self.colors["warning"],
                        "info": self.colors["secondary"]
                    }.get(type_, self.colors["secondary"])  # Safe default
                )
                
                try:
                    notification.place(relx=0.5, rely=0.1, anchor="center")
                except Exception as e:
                    self.logger.error(f"Failed to place notification: {e}")
                    return
                
                label = ctk.CTkLabel(
                    notification,
                    text=message[:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
                    text_color="white",
                    font=("Arial", 12)
                )
                label.pack(padx=20, pady=10)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                log_level = {
                    "success": logging.INFO,
                    "error": logging.ERROR,
                    "warning": logging.WARNING,
                    "info": logging.INFO
                }.get(type_, logging.INFO)
                
                self.logger.log(log_level, f"Notification [{type_}]: {message}")
                
                # –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                self.app.after(duration, lambda: self.safe_destroy(notification))
                
            except Exception as e:
                self.logger.error(f"Failed to create notification: {e}")
                
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        if threading.current_thread() is threading.main_thread():
            create_notification()
        else:
            self.app.after(0, create_notification)
        
    def delete_config(self, config, card):
        self.configs.remove(config)
        card.destroy()
        self.show_notification("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞", "info")
        
    def log(self, message):
        print(f"[VPN] {message}")
        
    def run(self):
        self.app.mainloop()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    import random  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    vpn_app = ModernVPNClient()
    vpn_app.run()